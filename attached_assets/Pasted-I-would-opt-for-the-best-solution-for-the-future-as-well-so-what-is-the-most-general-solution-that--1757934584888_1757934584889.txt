I would opt for the best solution for the future as well, so what is the most general solution that will not create RLS security fixes? I know Superbase and its very stringent RLS policies already, and I don't want to have conflicts in the future.



Checklist:

Recommend a future-proof RLS strategy
Explain why your current error happened
Propose concrete policies/patterns to avoid future conflicts
Offer optional enhancements (views/admin paths)
Best long-term approach

Keep RLS enabled on profiles.
Use strict “user-owns-row” policies.
Perform privileged writes via server/Edge Functions with the service_role key.
Avoid “allow-all” policies and avoid disabling RLS.
Why you hit the error

Your profiles policies allow INSERT/UPDATE only when id = auth.uid().
If the request wasn’t using the service_role key (or the payload didn’t set id to auth.uid()), RLS blocks it. This commonly happens when the anon key is used or id isn’t provided/matches.
Recommended policy setup for profiles (you already have this)

SELECT: allow authenticated users to read their own row.
INSERT: allow authenticated to create only their own row (WITH CHECK auth.uid() = id).
UPDATE: allow authenticated to update only their own row (USING and WITH CHECK auth.uid() = id).
DELETE: usually disallow, or allow only own row if required.
Operational patterns to avoid future conflicts

Client writes: when inserting/upserting profiles from the client, always include id = auth.uid(). Example:
INSERT/UPSERT must set id explicitly to the signed-in user’s UUID.
Server writes: do admin/system operations in an Edge Function or server using the service_role key (this bypasses RLS safely).
Don’t expose service_role to the client. Route client requests through your server/Edge Function.
For broader reads (e.g., public directory), create a view with only non-sensitive columns and use CREATE VIEW ... WITH (security_invoker=on) plus a specific SELECT policy for anon/authenticated on that view.
If you want, I can:

Keep your current profiles policies (best practice), and
Provide an example upsert you can call safely, or
Create a read-only view for limited public fields.
Tell me which you prefer:

Keep policies as-is and I’ll share a safe upsert snippet and optional public view, or
Adjust policies for any different access needs you have.