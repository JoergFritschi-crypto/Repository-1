import { useRef } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Printer, Download, Share2, X } from "lucide-react";
import { Badge } from "@/components/ui/badge";

interface ClimateReportModalProps {
  open: boolean;
  onClose: () => void;
  location: string;
  climateData: any;
}

export default function ClimateReportModal({ 
  open, 
  onClose, 
  location, 
  climateData 
}: ClimateReportModalProps) {
  const reportRef = useRef<HTMLDivElement>(null);

  if (!climateData) return null;
  

  const handlePrint = () => {
    const printContent = reportRef.current?.innerHTML || '';
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Climate Report - ${location}</title>
          <style>
            body {
              font-family: system-ui, -apple-system, sans-serif;
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
              line-height: 1.6;
            }
            h1 { color: #004025; font-size: 24px; margin-bottom: 10px; }
            h2 { color: #004025; font-size: 18px; margin-top: 20px; }
            h3 { color: #333; font-size: 16px; margin-top: 15px; }
            .header { text-align: center; margin-bottom: 30px; }
            .date { color: #666; font-size: 14px; }
            .section { margin: 20px 0; padding: 15px; border: 1px solid #e0e0e0; border-radius: 8px; }
            .zone-badge { display: inline-block; padding: 4px 12px; background: #f0f9ff; color: #004025; border-radius: 4px; font-weight: 600; }
            .data-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; margin: 15px 0; }
            .data-item { padding: 10px; background: #f9f9f9; border-radius: 4px; }
            .label { font-weight: 600; color: #666; font-size: 14px; }
            .value { font-size: 16px; color: #333; margin-top: 4px; }
            .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0; text-align: center; color: #666; font-size: 12px; }
            @media print {
              body { padding: 0; }
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          ${printContent}
          <div class="footer">
            <p>Generated by GardenScape Pro on ${new Date().toLocaleDateString()}</p>
            <p>Data source: Visual Crossing Weather API (${climateData.data_range?.total_years || 5}-year historical average)</p>
            <p>Analysis period: ${climateData.data_range?.date_range || 'Last 5 years'}</p>
          </div>
        </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
    }
  };

  const handleExport = () => {
    const reportData = {
      location,
      generated: new Date().toISOString(),
      climateData: {
        usda_zone: climateData.usda_zone,
        rhs_zone: climateData.rhs_zone,
        hardiness_category: climateData.hardiness_category,
        temperature_range: climateData.temperature_range,
        annual_rainfall: climateData.annual_rainfall,
        avg_temp_min: climateData.avg_temp_min,
        avg_temp_max: climateData.avg_temp_max,
        frost_dates: climateData.frost_dates,
        growing_season: climateData.growing_season,
        monthly_data: climateData.monthly_data
      }
    };

    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `climate-report-${location.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    const shareData = {
      title: `Climate Report - ${location}`,
      text: `Climate Report for ${location}\nUSDA Zone: ${climateData.usda_zone}\nRHS Zone: ${climateData.rhs_zone}\nAnnual Rainfall: ${climateData.annual_rainfall}mm\nGenerated by GardenScape Pro`,
      url: window.location.href
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        console.log('Share cancelled or failed');
      }
    } else {
      // Fallback: Copy to clipboard
      const text = `${shareData.title}\n\n${shareData.text}\n\n${shareData.url}`;
      navigator.clipboard.writeText(text);
      alert('Report details copied to clipboard!');
    }
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto bg-white climate-modal-content">
        <DialogHeader className="no-print bg-white text-gray-900">
          <DialogTitle className="text-gray-900">Climate Report</DialogTitle>
          <DialogDescription className="text-gray-600">
            Comprehensive climate analysis for {location}
          </DialogDescription>
          <div className="flex gap-2 pt-4">
            <Button onClick={handlePrint} size="sm" variant="outline">
              <Printer className="w-4 h-4 mr-2" />
              Print
            </Button>
            <Button onClick={handleExport} size="sm" variant="outline">
              <Download className="w-4 h-4 mr-2" />
              Export
            </Button>
            <Button onClick={handleShare} size="sm" variant="outline">
              <Share2 className="w-4 h-4 mr-2" />
              Share
            </Button>
          </div>
        </DialogHeader>

        <div ref={reportRef} className="space-y-6 pt-4 bg-white text-gray-900">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900">Climate Report</h1>
            <p className="text-lg font-medium text-gray-800">{location}</p>
            <p className="text-sm text-gray-600">Generated on {new Date().toLocaleDateString()}</p>
            {climateData.data_range && (
              <p className="text-sm text-gray-600 mt-2">
                Based on {climateData.data_range.total_years} years of historical data 
                ({climateData.data_range.years_included?.join(', ')})
              </p>
            )}
          </div>

          <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900 mb-3">Hardiness Zones</h2>
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">USDA Zone</div>
                <div className="text-lg font-semibold text-green-700">{climateData.usda_zone || 'N/A'}</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">RHS Rating</div>
                <div className="text-lg font-semibold text-green-700">{climateData.rhs_zone || 'N/A'}</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Category</div>
                <div className="text-lg font-semibold text-gray-900">{climateData.hardiness_category || 'N/A'}</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Temperature Range</div>
                <div className="text-lg font-semibold text-gray-900">{climateData.temperature_range || 'N/A'}</div>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900 mb-3">Climate Overview</h2>
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Annual Rainfall (Historical Average)</div>
                <div className="text-lg font-semibold text-gray-900">{Math.round(climateData.annual_rainfall || 0)}mm</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Average Min Temperature (Historical)</div>
                <div className="text-lg font-semibold text-gray-900">{typeof climateData.avg_temp_min === 'number' ? climateData.avg_temp_min.toFixed(1) : climateData.avg_temp_min}°C</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Average Max Temperature (Historical)</div>
                <div className="text-lg font-semibold text-gray-900">{typeof climateData.avg_temp_max === 'number' ? climateData.avg_temp_max.toFixed(1) : climateData.avg_temp_max}°C</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Growing Season</div>
                <div className="text-lg font-semibold text-gray-900">{climateData.growing_season?.length_days || 0} days</div>
              </div>
            </div>
          </div>

          {climateData.frost_dates && (
            <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900 mb-3">Frost Information</h2>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-white p-3 rounded border border-gray-200">
                  <div className="text-sm text-gray-600 mb-1">Typical Last Frost</div>
                  <div className="text-lg font-semibold text-gray-900">
                    {climateData.frost_dates.last_frost 
                      ? new Date(climateData.frost_dates.last_frost).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })
                      : 'No frost risk'}
                  </div>
                </div>
                <div className="bg-white p-3 rounded border border-gray-200">
                  <div className="text-sm text-gray-600 mb-1">Typical First Frost</div>
                  <div className="text-lg font-semibold text-gray-900">
                    {climateData.frost_dates.first_frost
                      ? new Date(climateData.frost_dates.first_frost).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })
                      : 'No frost risk'}
                  </div>
                </div>
              </div>
            </div>
          )}


          {climateData.gardening_advice && (
            <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900 mb-3">Gardening Recommendations</h2>
              <p className="text-sm leading-relaxed text-gray-700">{climateData.gardening_advice}</p>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}