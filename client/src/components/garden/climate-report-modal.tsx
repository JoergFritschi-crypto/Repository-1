import { useRef } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Printer, Download, Share2, X } from "lucide-react";
import { Badge } from "@/components/ui/badge";

interface ClimateReportModalProps {
  open: boolean;
  onClose: () => void;
  location: string;
  climateData: any;
}

export default function ClimateReportModal({ 
  open, 
  onClose, 
  location, 
  climateData 
}: ClimateReportModalProps) {
  const reportRef = useRef<HTMLDivElement>(null);

  if (!climateData) return null;
  

  const handlePrint = () => {
    const printContent = reportRef.current?.innerHTML || '';
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Climate Report - ${location}</title>
          <style>
            body {
              font-family: system-ui, -apple-system, sans-serif;
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
              line-height: 1.6;
            }
            h1 { color: #004025; font-size: 24px; margin-bottom: 10px; }
            h2 { color: #004025; font-size: 18px; margin-top: 20px; }
            h3 { color: #333; font-size: 16px; margin-top: 15px; }
            .header { text-align: center; margin-bottom: 30px; }
            .date { color: #666; font-size: 14px; }
            .section { margin: 20px 0; padding: 15px; border: 1px solid #e0e0e0; border-radius: 8px; }
            .zone-badge { display: inline-block; padding: 4px 12px; background: #f0f9ff; color: #004025; border-radius: 4px; font-weight: 600; }
            .data-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; margin: 15px 0; }
            .data-item { padding: 10px; background: #f9f9f9; border-radius: 4px; }
            .label { font-weight: 600; color: #666; font-size: 14px; }
            .value { font-size: 16px; color: #333; margin-top: 4px; }
            .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0; text-align: center; color: #666; font-size: 12px; }
            @media print {
              body { padding: 0; }
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          ${printContent}
          <div class="footer">
            <p>Generated by GardenScape Pro on ${new Date().toLocaleDateString()}</p>
            <p>Data source: Visual Crossing Weather API (${climateData.data_range?.total_years || 5}-year historical average)</p>
            <p>Analysis period: ${climateData.data_range?.date_range || 'Last 5 years'}</p>
          </div>
        </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
    }
  };

  const handleExport = () => {
    const reportData = {
      location,
      generated: new Date().toISOString(),
      climateData: {
        usda_zone: climateData.usda_zone,
        rhs_zone: climateData.rhs_zone,
        ahs_heat_zone: climateData.ahs_heat_zone,
        koppen_climate: climateData.koppen_climate,
        hardiness_category: climateData.hardiness_category,
        temperature_range: climateData.temperature_range,
        annual_rainfall: climateData.annual_rainfall,
        avg_temp_min: climateData.avg_temp_min,
        avg_temp_max: climateData.avg_temp_max,
        avg_humidity: climateData.avg_humidity,
        avg_wind_speed: climateData.avg_wind_speed,
        sunshine_percent: climateData.sunshine_percent,
        wettest_month: climateData.wettest_month,
        wettest_month_precip: climateData.wettest_month_precip,
        driest_month: climateData.driest_month,
        driest_month_precip: climateData.driest_month_precip,
        monthly_precip_pattern: climateData.monthly_precip_pattern,
        frost_dates: climateData.frost_dates,
        growing_season: climateData.growing_season,
        monthly_data: climateData.monthly_data
      }
    };

    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `climate-report-${location.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    const shareData = {
      title: `Climate Report - ${location}`,
      text: `Climate Report for ${location}\nUSDA Zone: ${climateData.usda_zone}\nRHS Zone: ${climateData.rhs_zone}\nAHS Heat Zone: ${climateData.ahs_heat_zone}\nClimate Type: ${climateData.koppen_climate}\nAnnual Rainfall: ${climateData.annual_rainfall}mm\nHumidity: ${climateData.avg_humidity}%\nGenerated by GardenScape Pro`,
      url: window.location.href
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        console.log('Share cancelled or failed');
      }
    } else {
      // Fallback: Copy to clipboard
      const text = `${shareData.title}\n\n${shareData.text}\n\n${shareData.url}`;
      navigator.clipboard.writeText(text);
      alert('Report details copied to clipboard!');
    }
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto bg-white climate-modal-content">
        <DialogHeader className="no-print bg-white text-gray-900">
          <DialogTitle className="text-gray-900">Climate Report</DialogTitle>
          <DialogDescription className="text-gray-600">
            Comprehensive climate analysis for {location}
          </DialogDescription>
          <div className="flex gap-2 pt-4">
            <Button onClick={handlePrint} size="sm" variant="outline">
              <Printer className="w-4 h-4 mr-2" />
              Print
            </Button>
            <Button onClick={handleExport} size="sm" variant="outline">
              <Download className="w-4 h-4 mr-2" />
              Export
            </Button>
            <Button onClick={handleShare} size="sm" variant="outline">
              <Share2 className="w-4 h-4 mr-2" />
              Share
            </Button>
          </div>
        </DialogHeader>

        <div ref={reportRef} className="space-y-6 pt-4 bg-white text-gray-900">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900">Climate Report</h1>
            <p className="text-lg font-medium text-gray-800">{location.replace(/\s+/g, ', ').replace(', ,', ',')}</p>
            <p className="text-sm text-gray-600">Generated on {(() => {
              const date = new Date();
              const month = date.toLocaleDateString('en-US', { month: 'long' });
              const day = date.getDate();
              const year = date.getFullYear();
              const ordinal = day === 1 ? 'first' : day === 2 ? 'second' : day === 3 ? 'third' : 
                             day === 5 ? 'fifth' : day === 21 ? 'twenty-first' : day === 22 ? 'twenty-second' : 
                             day === 23 ? 'twenty-third' : day === 31 ? 'thirty-first' : `${day}th`;
              return `${ordinal} of ${month} ${year}`;
            })()}</p>
            {climateData.data_range && (
              <p className="text-sm text-gray-600 mt-2">
                Based on {climateData.data_range.date_range || `${climateData.data_range.total_years} years of historical data`}
              </p>
            )}
          </div>

          <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900 mb-3">Climate Classification</h2>
            {climateData.koppen_climate && (
              <div className="mb-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
                <div className="text-sm text-gray-600 mb-1">KÃ¶ppen Climate Type</div>
                <div className="text-lg font-semibold text-blue-700">{climateData.koppen_climate}</div>
              </div>
            )}
            <div className="grid grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">USDA Zone</div>
                <div className="text-lg font-semibold text-green-700">{climateData.usda_zone || 'N/A'}</div>
                <div className="text-xs text-gray-500 mt-1">Cold hardiness</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">RHS Rating</div>
                <div className="text-lg font-semibold text-green-700">{climateData.rhs_zone || 'N/A'}</div>
                <div className="text-xs text-gray-500 mt-1">{climateData.hardiness_category || 'Plant type'}</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">AHS Heat Zone</div>
                <div className="text-lg font-semibold text-orange-600">{climateData.ahs_heat_zone || 'N/A'}</div>
                <div className="text-xs text-gray-500 mt-1">Heat tolerance</div>
              </div>
            </div>
            <div className="mt-3 p-3 bg-white rounded border border-gray-200">
              <div className="text-sm text-gray-600 mb-1">Temperature Range</div>
              <div className="text-lg font-semibold text-gray-900">{climateData.temperature_range || 'N/A'}</div>
            </div>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900 mb-3">Climate Overview</h2>
            <div className="grid grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Annual Rainfall</div>
                <div className="text-lg font-semibold text-gray-900">{typeof climateData.annual_rainfall === 'number' ? climateData.annual_rainfall.toFixed(1) : climateData.annual_rainfall}mm</div>
                <div className="text-xs text-gray-500 mt-1">{climateData.data_range?.total_years || 20}-year average</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Minimum Temperature</div>
                <div className="text-lg font-semibold text-blue-600">{typeof climateData.avg_temp_min === 'number' ? climateData.avg_temp_min.toFixed(1) : climateData.avg_temp_min}Â°C</div>
                <div className="text-xs text-gray-500 mt-1">Absolute minimum</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Maximum Temperature</div>
                <div className="text-lg font-semibold text-red-600">{typeof climateData.avg_temp_max === 'number' ? climateData.avg_temp_max.toFixed(1) : climateData.avg_temp_max}Â°C</div>
                <div className="text-xs text-gray-500 mt-1">Average maximum</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Growing Season</div>
                <div className="text-lg font-semibold text-green-600">{climateData.growing_season?.length_days || 0} days</div>
                <div className="text-xs text-gray-500 mt-1">Frost-free period</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Average Humidity</div>
                <div className="text-lg font-semibold text-cyan-600">{typeof climateData.avg_humidity === 'number' ? climateData.avg_humidity.toFixed(1) : climateData.avg_humidity}%</div>
                <div className="text-xs text-gray-500 mt-1">Year-round average</div>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <div className="text-sm text-gray-600 mb-1">Wind Speed</div>
                <div className="text-lg font-semibold text-gray-700">{climateData.avg_wind_speed ? `${typeof climateData.avg_wind_speed === 'number' ? climateData.avg_wind_speed.toFixed(1) : climateData.avg_wind_speed} km/h` : 'N/A'}</div>
                <div className="text-xs text-gray-500 mt-1">Average wind speed</div>
              </div>
            </div>
            
            {(climateData.sunshine_hours !== undefined || climateData.sunshine_percent !== undefined) && (
              <div className="mt-4 p-3 bg-yellow-50 rounded border border-yellow-200">
                <div className="text-sm text-gray-600 mb-1">Average Daily Sunshine</div>
                <div className="text-lg font-semibold text-yellow-700">
                  {climateData.sunshine_hours !== undefined 
                    ? `${climateData.sunshine_hours.toFixed(1)} hours per day`
                    : `${(climateData.sunshine_percent * 0.12).toFixed(1)} hours per day`}
                </div>
                <div className="text-xs text-gray-500 mt-1">Based on average cloud cover</div>
              </div>
            )}
          </div>

          {(climateData.wettest_month || climateData.driest_month) && (
            <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900 mb-3">Precipitation Patterns</h2>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-white p-3 rounded border border-gray-200">
                  <div className="text-sm text-gray-600 mb-1">Wettest Month</div>
                  <div className="text-lg font-semibold text-blue-600">{climateData.wettest_month || 'N/A'}</div>
                  <div className="text-sm text-gray-500 mt-1">{climateData.wettest_month_precip !== undefined ? `${typeof climateData.wettest_month_precip === 'number' ? climateData.wettest_month_precip.toFixed(1) : climateData.wettest_month_precip}mm avg` : ''}</div>
                </div>
                <div className="bg-white p-3 rounded border border-gray-200">
                  <div className="text-sm text-gray-600 mb-1">Driest Month</div>
                  <div className="text-lg font-semibold text-orange-600">{climateData.driest_month || 'N/A'}</div>
                  <div className="text-sm text-gray-500 mt-1">{climateData.driest_month_precip !== undefined ? `${typeof climateData.driest_month_precip === 'number' ? climateData.driest_month_precip.toFixed(1) : climateData.driest_month_precip}mm avg` : ''}</div>
                </div>
              </div>
              {climateData.monthly_precip_pattern && (
                <div className="mt-3 p-3 bg-white rounded border border-gray-200">
                  <div className="text-sm text-gray-600 mb-2">Monthly Precipitation Pattern (mm)</div>
                  <div className="grid grid-cols-12 gap-1 text-xs text-center">
                    {['J','F','M','A','M','J','J','A','S','O','N','D'].map((month, i) => (
                      <div key={`month-${i}`}>
                        <div className="text-gray-500">{month}</div>
                        <div className="font-semibold text-gray-700">{typeof climateData.monthly_precip_pattern[i] === 'number' ? climateData.monthly_precip_pattern[i].toFixed(1) : (climateData.monthly_precip_pattern[i] || 0)}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {climateData.frost_dates && (
            <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900 mb-3">Frost Information</h2>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-white p-3 rounded border border-gray-200">
                  <div className="text-sm text-gray-600 mb-1">Typical Last Frost</div>
                  <div className="text-lg font-semibold text-gray-900">
                    {climateData.frost_dates.last_frost 
                      ? (() => {
                          const date = new Date(climateData.frost_dates.last_frost);
                          const month = date.toLocaleDateString('en-US', { month: 'long' });
                          const day = date.getDate();
                          const ordinal = day === 1 ? 'first' : day === 2 ? 'second' : day === 3 ? 'third' : 
                                         day === 21 ? 'twenty-first' : day === 22 ? 'twenty-second' : day === 23 ? 'twenty-third' :
                                         day === 31 ? 'thirty-first' : `${day}th`;
                          return `${ordinal} of ${month}`;
                        })()
                      : 'No frost risk'}
                  </div>
                </div>
                <div className="bg-white p-3 rounded border border-gray-200">
                  <div className="text-sm text-gray-600 mb-1">Typical First Frost</div>
                  <div className="text-lg font-semibold text-gray-900">
                    {climateData.frost_dates.first_frost
                      ? (() => {
                          const date = new Date(climateData.frost_dates.first_frost);
                          const month = date.toLocaleDateString('en-US', { month: 'long' });
                          const day = date.getDate();
                          const ordinal = day === 1 ? 'first' : day === 2 ? 'second' : day === 3 ? 'third' : 
                                         day === 21 ? 'twenty-first' : day === 22 ? 'twenty-second' : day === 23 ? 'twenty-third' :
                                         day === 31 ? 'thirty-first' : `${day}th`;
                          return `${ordinal} of ${month}`;
                        })()
                      : 'No frost risk'}
                  </div>
                </div>
              </div>
            </div>
          )}


          {climateData.gardening_advice && (
            <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900 mb-3">Gardening Recommendations</h2>
              <p className="text-sm leading-relaxed text-gray-700">{climateData.gardening_advice}</p>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}